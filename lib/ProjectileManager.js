/* * Ludum Dare 29 * Tustin2121 & MaverickLoneshark */  (function() {	var TRAIL_LENGTH = 8;		function Projectile(type, x, y, x_vel, y_vel, active)	{		this.type = type;		this.x = new Array();		this.y = new Array();				var birth = new Date();		this.time = birth.getTime();				this.x[0] = x;		this.y[0] = y;		this.x_vel = x_vel;		this.y_vel = y_vel;		this.active = active;				return;	}		function ProjectileManager()	{		this.projectiles = new Array();		this.ready_index = 0;				for(var i = 0; i < 100; i++)		{			this.projectiles[i] = new Projectile();			this.projectiles[i].active = false;		}				return;	}		ProjectileManager.prototype.initializeProjectile = function(type, x, y, x_vel, y_vel)	{		if(!this.projectiles[this.ready_index].active)		{			this.projectiles[this.ready_index].type = type;						for(var i = 0; i < TRAIL_LENGTH; i++)			{				this.projectiles[this.ready_index].x[i] = x;				this.projectiles[this.ready_index].y[i] = y;			}						this.projectiles[this.ready_index].x_vel = x_vel;			this.projectiles[this.ready_index].y_vel = y_vel;			this.projectiles[this.ready_index].active = true;						this.ready_index = (this.ready_index + 1) % this.projectiles.length;						return;		}				var next = this.ready_index + 1;				while(next != this.ready_index)		{			if(!this.projectiles[next].active)			{				this.projectiles[next].type = type;								for(var i = 0; i < TRAIL_LENGTH; i++)				{					this.projectiles[next].x[i] = x;					this.projectiles[next].y[i] = y;				}								this.projectiles[next].x_vel = x_vel;				this.projectiles[next].y_vel = y_vel;				this.projectiles[next].active = true;								return;			}						next = (next + 1) % this.projectiles.length;		}				//dynamically allocate more memory for pool since it is full!		this.projectiles[this.projectiles.length] = new Projectile(type, x, y, x_vel, y_vel, true);				return;	}		ProjectileManager.prototype.update = function()	{		for(var m = 0; m < this.projectiles.length; m++)		{			if(this.projectiles[m].active)			{				//contrail				for(i = TRAIL_LENGTH - 1; i > 0; i--)				{					this.projectiles[m].x[i] = this.projectiles[m].x[i - 1];					this.projectiles[m].y[i] = this.projectiles[m].y[i - 1];				}								//do this.projectiles[m].update() here				switch(this.projectiles[m].type)				{					case 0:						this.projectiles[m].x[0] += this.projectiles[m].x_vel;						this.projectiles[m].y[0] += this.projectiles[m].y_vel;					break;										case 1:											break;										case 2:											break;										default:					break;				}								if((this.projectiles[m].x[TRAIL_LENGTH - 1] < 0) || (this.projectiles[m].x[TRAIL_LENGTH - 1] > 1024)||					(this.projectiles[m].y[TRAIL_LENGTH - 1] < 0) || (this.projectiles[m].y[TRAIL_LENGTH - 1] > 12 * 256))				{					this.projectiles[m].active = false;				}			}		}				return;	}		ProjectileManager.prototype.TRAIL_LENGTH = TRAIL_LENGTH;		window.ProjectileManager = ProjectileManager;		return; })();